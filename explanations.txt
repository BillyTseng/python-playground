Question 1:
I used the concept of the hash map to store the counts of upper and lower case of alphabets
for source and target string. By harnessing them, I can achieve O(n) in time complicity.
Moreover, I only need two constant length list to store the hash maps.
The Space complicity is O(1)

Question 2:
By using recursion, I break the input string into a smallest string to process it.
The time complicity is O(2^n), and the space complicity is O(1).

Question 3:
I sort the nodes by weight of the edge in ascending order. Since the least number
 of the edge will be the number of vertices minus one, the minimum spanning tree is composed
of sorted nodes list. Since reading all elements of the graph, the time complicity is O(n).
Because of the extra space to exchange graph to list, the space complicity is O(n).

Question 4:
Finding and saving the parents of nodes, then traverse nodes to find the collide one.
Once collide is occurred, the node is the least common ancestor. Since using a loop to find
parents, so the time complicity is O(n), n is the number of nodes. Moreover, I spent O(log n) to
save parent nodes.

Question 5:
I record the total length of the linked list while setting up. I only need to traverse
whole linked list once. Thus, the time complicity is O(n), n is the length of the linked list.
And,  the space complicity is O(1), since the consumed space is constant.
